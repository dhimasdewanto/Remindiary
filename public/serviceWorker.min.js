const cacheName='remindiary_v6';self.addEventListener('install',null);self.addEventListener('activate',event=>deleteOldCaches(event));self.addEventListener('fetch',event=>fetchEvent(event));function deleteOldCaches(event){event.waitUntil(caches.keys().then(listCacheNames=>{return Promise.all(listCacheNames.map(oldCache=>{if(oldCache!==cacheName){return caches.delete(oldCache)}}))}))}
function fetchEvent(event){if(isCachePriority(event)){cachePriorityStrategy(event);return}
networkFirstStrategy(event)}
function isCachePriority(event){const responseName=extractUrl(event.request.url);return(responseName=="app.css"||responseName=="app.js"||responseName=="particles.min.js"||responseName=="setTheme.js")}
function cachePriorityStrategy(event){event.respondWith(caches.match(event.request).then(response=>{return response||fetch(event.request).then(fetchResponse=>{return cacheRequest(event,fetchResponse)})}))}
function networkFirstStrategy(event){event.respondWith(fetch(event.request).then(response=>{return cacheRequest(event,response)}).catch(()=>{return caches.match(event.request).then(response=>response)}))}
function cacheRequest(event,response){const responseClone=response.clone();caches.open(cacheName).then(cache=>{if(event.request.method=='GET'){cache.put(event.request,responseClone)}});return response}
function extractUrl(url){return url.substr(url.lastIndexOf("/")+1)}(()=>{'use strict';const WebPush={init(){self.addEventListener('push',this.notificationPush.bind(this));self.addEventListener('notificationclick',this.notificationClick.bind(this));self.addEventListener('notificationclose',this.notificationClose.bind(this))},notificationPush(event){if(!(self.Notification&&self.Notification.permission==='granted')){return}
if(event.data){event.waitUntil(this.sendNotification(event.data.json()))}},notificationClick(event){if(event.action==='open_profile'){return this.openProfile(event)}
if(event.notification.data.user_id){return this.openProfile(event)}
if(event.action==='open_post'){return this.openPost(event)}
if(event.notification.data.post_id){return this.openPost(event)}
self.clients.openWindow('/app')},openProfile(event){const user_id=event.notification.data.user_id;self.clients.openWindow('/app/profile/'+user_id);return},openPost(event){const post_id=event.notification.data.post_id;self.clients.openWindow('/app/post/'+post_id);return},notificationClose(event){self.registration.pushManager.getSubscription().then(subscription=>{if(subscription){this.dismissNotification(event,subscription)}})},sendNotification(data){return self.registration.showNotification(data.title,data)},dismissNotification({notification},{endpoint}){if(!notification.data||!notification.data.id){return}
const data=new FormData();data.append('endpoint',endpoint)}}
WebPush.init()})()